generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  GARCOM
  COZINHA
  GERENTE
}

model User {
  id         String    @id @default(uuid())
  name       String
  email      String    @unique
  password   String
  role       UserRole  @default(USER)
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("users")
}

model UsersApp {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  password     String
  reservations Reservation[]
  created_at   DateTime?     @default(now())
  updated_at   DateTime?     @default(now())

  @@map("users_app")
}

model Category {
  id         String    @id @default(uuid())
  name       String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  products   Product[]

  @@map("categories")
}

model Product {
  id          String    @id @default(uuid())
  name        String
  price       String
  description String
  banner      String
  created_at  DateTime? @default(now())
  updated_at  DateTime? @default(now())
  category_id String
  items       Item[]
  category    Category  @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@map("products")
}

model Order {
  id         String    @id @default(uuid())
  table      Int
  status     Boolean   @default(false)
  draft      Boolean   @default(false)
  name       String?
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  items      Item[]

  @@map("orders")
}

model Item {
  id         String    @id @default(uuid())
  amount     Int
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  order_id   String
  product_id String
  order      Order     @relation(fields: [order_id], references: [id])
  product    Product   @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@map("items")
}

model RolePermission {
  id         String    @id @default(uuid())
  role       UserRole
  route      String
  can_access Boolean   @default(true)
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@unique([role, route])
  @@map("role_permissions")
}

model Reservation {
  id            String    @id @default(uuid())
  user_app_id   String
  date          DateTime
  time          String
  people_count  Int
  status        String    @default("PENDING")
  notes         String?
  user_app      UsersApp  @relation(fields: [user_app_id], references: [id], onDelete: Cascade)
  created_at    DateTime? @default(now())
  updated_at    DateTime? @default(now())

  @@map("reservations")
}
